#!/usr/bin/env bash

set -e

default_help() {
  cat <<EOF
Usage: repoer <command> [arguments]
Commands:
  create    Create a new GitHub repository and push current directory
  help      Show this help message
Examples:
  repoer create Awesome-Repo "My awesome project" true
EOF
  exit 1
}

create_repo() {
  local repo_name="$1"
  local repo_description="${2:-}"
  local is_private="${3:-false}"

  if [[ -z "$repo_name" ]]; then
    echo "Error: Missing <repo-name>."
    default_help
  fi

  echo "Creating repo: $repo_name"
  local payload
  payload="{"
  payload+="\"name\":\"$repo_name\""
  payload+=",\"description\":\"$repo_description\""
  payload+=",\"private\":$is_private"
  payload+="}"

  response=$(curl -s \
    -H "Authorization: token $GITHUB_TOKEN" \
    -H "Content-Type: application/json" \
    -d "$payload" \
    https://api.github.com/user/repos)

  if [[ ! -d .git ]]; then
    echo "Initializing local git repository ..."
    git init
  fi

  if git remote | grep origin &>/dev/null; then
    git remote remove origin
  fi

  ssh_url=$(echo "$response" | grep -o '"ssh_url": *"[^"]*' | cut -d '"' -f4)
  https_url=$(echo "$response" | grep -o '"clone_url": *"[^"]*' | cut -d '"' -f4)
  if [[ -n "$ssh_url" ]]; then
    echo "Using SSH URL: $ssh_url"
    git remote add origin "$ssh_url"
  else
    if [[ -n "$https_url" ]]; then
      echo "Using HTTPS URL: $https_url"
      git remote add origin "$https_url"
    else
      echo "Failed to create repository. Response:"
      echo "$response"
      exit 1
    fi
  fi

  git add .
  git commit -m "Initial commit" || true
  git branch -M master
  git push -u origin HEAD

  echo "Repoer: Create repository success!"
}

case "$1" in
  create)
    shift
    create_repo "$@"
    ;;
  help|--help|-h)
    default_help
    ;;
  *)
    default_help
    ;;
esac
